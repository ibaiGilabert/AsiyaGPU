Build Asiya:

	$qlogin		//S'ha de construir en un node de còmput.
	$bash
	$make

Generate .o:

	$g++ -c Common.cpp
	$g++ -c Asiya.cpp


Link and generate executable:

	$g++ -o Asiya Asiya.o Common.o


Linking Reference bin libraries:

	#include <boost/regex.hpp>				->		-lboos_regex
	#include <boost/filesystem.hpp>			->		-lboost_system -lboost_filesystem


DEBUGGING

	Afegir -ggdb al Makefile

	$gdb Asiya
	>run (entrada)

XML PARSER

	Install:

		$apt-get intall libxml2-dev

	Compile:

		$g++ libxml.cpp -o libxml -lxml2 -I/usr/include/libxml2


	EXEMPLE useful de construcció del document xml: writer_newxml.cpp



AXIOMES:

	undef de perl és equivalent a -1

	extract xml.gz	->	$gunzip file

REVISAR:

	Config.cpp -> Obtenció de "SYSTEM" del fitxer de configuració. (sub process_config_file)

	Config.cpp -> Les funcions process_nist_file i process_raw_file estan incompletes. (dependència NISTXML.pm)

	Config.cpp -> sizes dels scalar(rIDX) (el sospitós -1)

	Core.cpp -> Creació de la TSDatabase (do_score)

	Scores.cpp -> La puntuació de l'atribut "all" de scores és -1 en comptes de {} en l'original %hOQ.

	Core.cpp ->	HREF pot ser un hash multiple (del(s?) references files)

	Config.cpp	->	validate_configuration inacabat

	BLEUNIST.cpp	->	NO fa servir hOQ, es passa el paràmetre només per complir l'herència.

	IQXML.cpp	->	La precissió amb la que s'escriuren els xml's no és la indicada a la llibreria.

	IQXML.cpp	->	En la definició del !DOCTYPE, hi ha el '[]' dins de les "'s.

	NISTXML		->	falta el repair_file a la funcio read_file (llegir nist).

	Common.cpp	->	safe_division incomplet (sense default)

	GENERAL		->	El seed del rand s'hauria de declarar una UNICA vegada a metrics, i no a cada mètrica.


SHORTCUTS

	-->IF file exists
	#include <boost/filesystem.hpp>

	  boost::filesystem::path p (TOOLS);   // p reads clearer than argv[1] in the following code

	  if (exists(p))    // does p actually exist?
	  {
	    if (is_regular_file(p))        // is p a regular file?
	      cout << p << " size is " << file_size(p) << '\n';

	    else if (is_directory(p))      // is p a directory?
   		   cout << p << " is a directory\n";

   	-->CURRENT PATH

   		boost::filesystem::path path( boost::filesystem::current_path() );
		std::cout << "Current path is : " << path << std::endl;

	-->SPLIT string

    boost::regex reeq(" ");
    boost::sregex_token_iterator i(entry.second.begin(), entry.second.end(), reeq, -1);
    boost::sregex_token_iterator j;
    while (i != j) {
        Config::systems.insert(*i++);
    }

    	//MILLOR ALTERNATIVA

    	#include <boost/algorithm/string.hpp>
		std::vector<std::string> strs;
		boost::split(strs, "string to split", boost::is_any_of("\t "));

		//ALTRA ALTERNATIVA (amb istringstream)

    	std::string s = "Hello How Are You Today Man";
	    std::vector<std::string> v;
	    std::istringstream buf(s);
	    for(std::string token; getline(buf, token, ' '); )
	        v.push_back(token);

	-->	MATCH DE CARACTERS ESPECIALS	(joc de proves a sandbox/boost_replace.cc)
	    re = ("\\*");   report_xml = boost::regex_replace(report_xml, re, "\\\\*");
	    re = (";");     report_xml = boost::regex_replace(report_xml, re, "\\\\;");
	    re = ("`");     report_xml = boost::regex_replace(report_xml, re, "\\\\`");
	    re = ("'");     report_xml = boost::regex_replace(report_xml, re, "\\\\'");
	    re = ("\\(");   report_xml = boost::regex_replace(report_xml, re, "\\\\(");
	    re = ("\\)");   report_xml = boost::regex_replace(report_xml, re, "\\\\)");
	    re = ("\\?");   report_xml = boost::regex_replace(report_xml, re, "\\\\?");

--> DELETE SPACE PADING
        boost::regex re("\\s*$");//, boost::regex::perl|boost::regex::icase);
        boost::regex re2("^\\s*");//, boost::regex::perl|boost::regex::icase);

        type = boost::regex_replace(type, re, "");
        data = boost::regex_replace(data, re2, "");

TODO LIST

	-	LOCAL
				->	Completar l'ESA (test de expressions regulars a regular_exp.pl)
				->	Completar el NGRAM.
				->	Completar el CE.

	-	CLUSTER
				->	Comprovar de nou el done-list amb les noves modificacions de les metriques.

				->	Provar el METEOR.
				->	Provar el GTM	(nova versio de NISTXML amb SGML_GTM_create_doc)

		// Notes al provar execucions al cluster.
			Canviar el path del tools a Config.cpp
			Canviar el data_path del fitxer d'entrada Asiya.config al directori actual (pwd).


		//Versions canviades a tenir en compte
			Core.cpp.old	->	get_seg_doc_scores està inflat a xivatos.

DONE LIST

	->	BLEU, NIST, BLEUNIST, ROUGE;	resultats escirts correctament.


QUESTIONS

	->	Demanar exemples de tipus input=nist en format NISTXML files. (provar el read_file, repair_file, etc)
	->	Es Necessita alguna tool especial per executar el METEOR/ESA que no hi ha el metric_set a Asiya.config
	->	Al executar el gtm-1.4 tinc aquests problemes

		$java -Dfile.encoding=UTF-8 -jar /home/soft/asiya/tools/gtm-1.4/gtm.jar +s +d

			Picked up _JAVA_OPTIONS: -Xmx2048M
			Could not create the Java virtual machine.
			[ERROR] problems running GTM...

		En una execució interactiva amb qlogin no puc crear la màquina virtual de java.